"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const head_1 = __importDefault(require("next/head"));
const react_1 = __importDefault(require("react"));
const apollo_1 = __importDefault(require("./apollo"));
// Gets the display name of a JSX component for dev tools
function getDisplayName(Component) {
    return Component.displayName || Component.name || 'Unknown';
}
function withApollo(client, options = {}) {
    return (Page, pageOptions = {}) => {
        const getInitialProps = Page.getInitialProps;
        const getDataFromTree = 'getDataFromTree' in pageOptions
            ? pageOptions.getDataFromTree
            : options.getDataFromTree;
        const render = pageOptions.render || options.render;
        function WithApollo({ apollo, apolloState, ...props }) {
            var _a;
            const apolloClient = apollo ||
                apollo_1.default(client, { initialState: (_a = apolloState) === null || _a === void 0 ? void 0 : _a.data });
            if (render) {
                return render({
                    Page: Page,
                    props: { ...props, apollo: apolloClient }
                });
            }
            return react_1.default.createElement(Page, Object.assign({}, props, { apollo: apolloClient }));
        }
        WithApollo.displayName = `WithApollo(${getDisplayName(Page)})`;
        if (getInitialProps || getDataFromTree) {
            WithApollo.getInitialProps = async (pageCtx) => {
                const ctx = 'Component' in pageCtx ? pageCtx.ctx : pageCtx;
                const { AppTree } = pageCtx;
                const headers = ctx.req ? ctx.req.headers : {};
                const apollo = apollo_1.default(client, { ctx, headers });
                const apolloState = {};
                let pageProps = {};
                if (getInitialProps) {
                    ctx.apolloClient = apollo;
                    pageProps = await getInitialProps(pageCtx);
                }
                if (typeof window === 'undefined') {
                    if (ctx.res && (ctx.res.headersSent || ctx.res.finished)) {
                        return pageProps;
                    }
                    if (getDataFromTree) {
                        try {
                            const props = { ...pageProps, apolloState, apollo };
                            const appTreeProps = 'Component' in pageCtx ? props : { pageProps: props };
                            await getDataFromTree(react_1.default.createElement(AppTree, Object.assign({}, appTreeProps)));
                        }
                        catch (error) {
                            // Prevent Apollo Client GraphQL errors from crashing SSR.
                            if (process.env.NODE_ENV !== 'production') {
                                // tslint:disable-next-line no-console This is a necessary debugging log
                                console.error('GraphQL error occurred [getDataFromTree]', error);
                            }
                        }
                        // getDataFromTree does not call componentWillUnmount
                        // head side effect therefore need to be cleared manually
                        head_1.default.rewind();
                        apolloState.data = apollo.cache.extract();
                    }
                }
                // To avoid calling initApollo() twice in the server we send the Apollo Client as a prop
                // to the component, otherwise the component would have to call initApollo() again but this
                // time without the context, once that happens the following code will make sure we send
                // the prop as `null` to the browser
                apollo.toJSON = () => {
                    return null;
                };
                return {
                    ...pageProps,
                    apolloState,
                    apollo
                };
            };
        }
        return WithApollo;
    };
}
exports.default = withApollo;
